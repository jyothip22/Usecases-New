def parse_analysis_field(data: dict) -> dict:
    """
    Extracts structured fields from LLM response:
    Supports both numbered and key-value formats.
    Ensures Citation is not merged with Explanation.
    """
    answer = data.get('answer')
    if not isinstance(answer, str):
        return {}

    parsed = {}

    # Handle numbered format: 1. Classification: ... 2. Category: ...
    numbered_matches = re.findall(
        r"\d+\.\s*(Classification|Category|Explanation|Citation(?:\s*\(required\))?):\s*(.*?)(?=\n\d+\.|$)",
        answer,
        re.DOTALL
    )

    if numbered_matches:
        for key, value in numbered_matches:
            key_clean = key.strip().lower().replace(" ", "_").replace("(required)", "").strip()
            parsed[key_clean] = value.strip()
            logger.debug("Parsed (numbered) field '%s': '%s'", key_clean, parsed[key_clean])
        return parsed

    # Fallback: plain key-value format
    line_matches = re.findall(
        r"(Classification|Category|Explanation|Citation):\s*(.*?)(?=\n(?:Classification|Category|Explanation|Citation):|$)",
        answer,
        re.DOTALL
    )

    for key, value in line_matches:
        key_clean = key.strip().lower().replace(" ", "_")
        parsed[key_clean] = value.strip()
        logger.debug("Parsed (line) field '%s': '%s'", key_clean, parsed[key_clean])

    return parsed
